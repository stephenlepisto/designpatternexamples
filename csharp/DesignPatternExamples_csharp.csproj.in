<!--
    This is a hand-built project file for creating the C# DesignPatternExamples
    application.  This allows me to create a CMake template of this file to
    allow me to change version numbers automatically from CMake.  It also allows
    me to change the intermediate directory used for building this project.

    When building this project with dotnet build, the first that does is
    restore any needed nuget packages (there are no packages here for that but
    the step is still taken).  This restore process creates a project.assets.json
    file in the intermediate directory, which is, by default, obj/.  However,
    the project.assets.json file is applies to all project files in that parent
    directory of the intermediate directory.  CMake creates a .vcxproj file on
    Windows for running custom targets and custom commands.  The custom target,
    in this case, is a command to build the C# example from the .csproj
    generated from this template file.  The command, dotnet build, uses msbuild
    to do the work but only after the restore step that generates the
    project.assets.json file.  CMake also uses msbuild to build the .vcxproj file
    and msbuild ends up trying to use the project.assets.json file when building
    the .vcxproj file.  Since the project.assets.json file was built for the
    .csproj file, the .vcxproj file triggers an error ("Sequence contains no elements")
    when trying to build the project again without cleaning the project.

    By changing the intermediate directory to where the project.assets.json file
    is written, building the .vcxproj file does not accidentally stumble over
    the file (the .vcxproj does not use the project.assets.json file but that
    file still gets read in and partially used if it exists).  It was easier
    for me to change the intermediate directory in the .csproj file itself than
    trying to alter the .vcxproj generated by CMake through target properties.
-->
<Project>

  <PropertyGroup>
    <!--
        Change the intermediate directory used by extensions as well as for
        the compiler.  The project.assets.json is created by an extension.
    -->
    <MSBuildProjectExtensionsPath>obj_csharp</MSBuildProjectExtensionsPath>
    <BaseIntermediateOutputPath>$(MSBuildProjectExtensionsPath)/</BaseIntermediateOutputPath>

    <OutputType>Exe</OutputType>
    <TargetFramework>net7.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <Title>DesignPatternExamples_csharp</Title>
    <Copyright>Copyright (C)  2015, 2023</Copyright>
    <AssemblyVersion>${CMAKE_PROJECT_VERSION}</AssemblyVersion>
    <FileVersion>${CMAKE_PROJECT_VERSION}</FileVersion>
    <Description>Example of some Design Pattern Examples in C#.</Description>
  </PropertyGroup>
  <!-- The normally implied top import now must be explicit to change build output path -->
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <ItemGroup>
      <Compile Remove="@(Compile)" />
      <Compile Include="${CMAKE_CURRENT_SOURCE_DIR}/*.cs" />
  </ItemGroup>

  <!-- The normally implied top import now must be explicit to change build output path -->
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />
</Project>
